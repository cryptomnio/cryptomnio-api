=begin
#Cryptomnio API

#test

The version of the OpenAPI document: 0.0.1
Contact: helloworld@flanneldivision.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.1.0

=end

require 'date'

module OpenapiClient
  class Order
    # Cryptomnio order ID
    attr_accessor :internal_order_id

    # Exchange order ID
    attr_accessor :exchange_order_id

    attr_accessor :exchange

    attr_accessor :pair

    # Order side (\"sell\" or \"buy\")
    attr_accessor :side

    # Order Type only limit is supported
    attr_accessor :type

    # Order status
    attr_accessor :status

    # Order volume
    attr_accessor :volume

    # Order executed (filled) amount
    attr_accessor :filled

    # Order price
    attr_accessor :price

    # Order fee
    attr_accessor :fee

    # Order creation timestamp
    attr_accessor :created_at

    # The timestamp when order was synchronized last time
    attr_accessor :last_update_at

    # Order close timestamp
    attr_accessor :closed_at

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'internal_order_id' => :'internalOrderId',
        :'exchange_order_id' => :'exchangeOrderId',
        :'exchange' => :'exchange',
        :'pair' => :'pair',
        :'side' => :'side',
        :'type' => :'type',
        :'status' => :'status',
        :'volume' => :'volume',
        :'filled' => :'filled',
        :'price' => :'price',
        :'fee' => :'fee',
        :'created_at' => :'createdAt',
        :'last_update_at' => :'lastUpdateAt',
        :'closed_at' => :'closedAt'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'internal_order_id' => :'Float',
        :'exchange_order_id' => :'String',
        :'exchange' => :'ExchangeCode',
        :'pair' => :'PairCode',
        :'side' => :'String',
        :'type' => :'String',
        :'status' => :'String',
        :'volume' => :'Float',
        :'filled' => :'Float',
        :'price' => :'Float',
        :'fee' => :'Float',
        :'created_at' => :'DateTime',
        :'last_update_at' => :'DateTime',
        :'closed_at' => :'DateTime'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::Order` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::Order`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'internal_order_id')
        self.internal_order_id = attributes[:'internal_order_id']
      end

      if attributes.key?(:'exchange_order_id')
        self.exchange_order_id = attributes[:'exchange_order_id']
      end

      if attributes.key?(:'exchange')
        self.exchange = attributes[:'exchange']
      end

      if attributes.key?(:'pair')
        self.pair = attributes[:'pair']
      end

      if attributes.key?(:'side')
        self.side = attributes[:'side']
      else
        self.side = 'buy'
      end

      if attributes.key?(:'type')
        self.type = attributes[:'type']
      else
        self.type = 'limit'
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      else
        self.status = 'queued'
      end

      if attributes.key?(:'volume')
        self.volume = attributes[:'volume']
      else
        self.volume = 0
      end

      if attributes.key?(:'filled')
        self.filled = attributes[:'filled']
      else
        self.filled = 0
      end

      if attributes.key?(:'price')
        self.price = attributes[:'price']
      else
        self.price = 0
      end

      if attributes.key?(:'fee')
        self.fee = attributes[:'fee']
      else
        self.fee = 0
      end

      if attributes.key?(:'created_at')
        self.created_at = attributes[:'created_at']
      end

      if attributes.key?(:'last_update_at')
        self.last_update_at = attributes[:'last_update_at']
      end

      if attributes.key?(:'closed_at')
        self.closed_at = attributes[:'closed_at']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @internal_order_id.nil?
        invalid_properties.push('invalid value for "internal_order_id", internal_order_id cannot be nil.')
      end

      if @exchange_order_id.nil?
        invalid_properties.push('invalid value for "exchange_order_id", exchange_order_id cannot be nil.')
      end

      if @exchange.nil?
        invalid_properties.push('invalid value for "exchange", exchange cannot be nil.')
      end

      if @pair.nil?
        invalid_properties.push('invalid value for "pair", pair cannot be nil.')
      end

      if @side.nil?
        invalid_properties.push('invalid value for "side", side cannot be nil.')
      end

      if @type.nil?
        invalid_properties.push('invalid value for "type", type cannot be nil.')
      end

      if @status.nil?
        invalid_properties.push('invalid value for "status", status cannot be nil.')
      end

      if @volume.nil?
        invalid_properties.push('invalid value for "volume", volume cannot be nil.')
      end

      if @filled.nil?
        invalid_properties.push('invalid value for "filled", filled cannot be nil.')
      end

      if @price.nil?
        invalid_properties.push('invalid value for "price", price cannot be nil.')
      end

      if @fee.nil?
        invalid_properties.push('invalid value for "fee", fee cannot be nil.')
      end

      if @created_at.nil?
        invalid_properties.push('invalid value for "created_at", created_at cannot be nil.')
      end

      if @last_update_at.nil?
        invalid_properties.push('invalid value for "last_update_at", last_update_at cannot be nil.')
      end

      if @closed_at.nil?
        invalid_properties.push('invalid value for "closed_at", closed_at cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @internal_order_id.nil?
      return false if @exchange_order_id.nil?
      return false if @exchange.nil?
      return false if @pair.nil?
      return false if @side.nil?
      side_validator = EnumAttributeValidator.new('String', ["buy", "sell"])
      return false unless side_validator.valid?(@side)
      return false if @type.nil?
      type_validator = EnumAttributeValidator.new('String', ["limit"])
      return false unless type_validator.valid?(@type)
      return false if @status.nil?
      status_validator = EnumAttributeValidator.new('String', ["queued", "open", "cancelled", "filled", "rejected"])
      return false unless status_validator.valid?(@status)
      return false if @volume.nil?
      return false if @filled.nil?
      return false if @price.nil?
      return false if @fee.nil?
      return false if @created_at.nil?
      return false if @last_update_at.nil?
      return false if @closed_at.nil?
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] side Object to be assigned
    def side=(side)
      validator = EnumAttributeValidator.new('String', ["buy", "sell"])
      unless validator.valid?(side)
        fail ArgumentError, "invalid value for \"side\", must be one of #{validator.allowable_values}."
      end
      @side = side
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] type Object to be assigned
    def type=(type)
      validator = EnumAttributeValidator.new('String', ["limit"])
      unless validator.valid?(type)
        fail ArgumentError, "invalid value for \"type\", must be one of #{validator.allowable_values}."
      end
      @type = type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status)
      validator = EnumAttributeValidator.new('String', ["queued", "open", "cancelled", "filled", "rejected"])
      unless validator.valid?(status)
        fail ArgumentError, "invalid value for \"status\", must be one of #{validator.allowable_values}."
      end
      @status = status
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          internal_order_id == o.internal_order_id &&
          exchange_order_id == o.exchange_order_id &&
          exchange == o.exchange &&
          pair == o.pair &&
          side == o.side &&
          type == o.type &&
          status == o.status &&
          volume == o.volume &&
          filled == o.filled &&
          price == o.price &&
          fee == o.fee &&
          created_at == o.created_at &&
          last_update_at == o.last_update_at &&
          closed_at == o.closed_at
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [internal_order_id, exchange_order_id, exchange, pair, side, type, status, volume, filled, price, fee, created_at, last_update_at, closed_at].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        OpenapiClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
