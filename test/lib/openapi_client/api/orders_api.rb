=begin
#Cryptomnio API

#test

The version of the OpenAPI document: 0.0.1
Contact: helloworld@flanneldivision.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.1.0

=end

require 'cgi'

module OpenapiClient
  class OrdersApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Cancel order
    # Cancels order on exchange and updates order status in Cryptomnio storage. This operation is allowed only if API key has been activated. 
    # @param order_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Order]
    def d_elete_orders_order_id(order_id, opts = {})
      data, _status_code, _headers = d_elete_orders_order_id_with_http_info(order_id, opts)
      data
    end

    # Cancel order
    # Cancels order on exchange and updates order status in Cryptomnio storage. This operation is allowed only if API key has been activated. 
    # @param order_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Order, Integer, Hash)>] Order data, response status code and response headers
    def d_elete_orders_order_id_with_http_info(order_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrdersApi.d_elete_orders_order_id ...'
      end
      # verify the required parameter 'order_id' is set
      if @api_client.config.client_side_validation && order_id.nil?
        fail ArgumentError, "Missing the required parameter 'order_id' when calling OrdersApi.d_elete_orders_order_id"
      end
      # resource path
      local_var_path = '/orders/{orderId}'.sub('{' + 'orderId' + '}', CGI.escape(order_id.to_s).gsub('%2F', '/'))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Order' 

      # auth_names
      auth_names = opts[:auth_names] || ['BasicAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrdersApi#d_elete_orders_order_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all orders
    # Returns all orders
    # @param [Hash] opts the optional parameters
    # @option opts [ExchangeCode] :exchange 
    # @option opts [String] :key_id API key ID
    # @option opts [Float] :internal_order_id Cryptomnio order ID
    # @option opts [Boolean] :closed_orders Get only closed orders
    # @option opts [Boolean] :active_orders Get only active orders
    # @return [Array<Order>]
    def g_et_orders(opts = {})
      data, _status_code, _headers = g_et_orders_with_http_info(opts)
      data
    end

    # Get all orders
    # Returns all orders
    # @param [Hash] opts the optional parameters
    # @option opts [ExchangeCode] :exchange 
    # @option opts [String] :key_id API key ID
    # @option opts [Float] :internal_order_id Cryptomnio order ID
    # @option opts [Boolean] :closed_orders Get only closed orders
    # @option opts [Boolean] :active_orders Get only active orders
    # @return [Array<(Array<Order>, Integer, Hash)>] Array<Order> data, response status code and response headers
    def g_et_orders_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrdersApi.g_et_orders ...'
      end
      # resource path
      local_var_path = '/orders'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'exchange'] = opts[:'exchange'] if !opts[:'exchange'].nil?
      query_params[:'keyId'] = opts[:'key_id'] if !opts[:'key_id'].nil?
      query_params[:'internalOrderId'] = opts[:'internal_order_id'] if !opts[:'internal_order_id'].nil?
      query_params[:'closedOrders'] = opts[:'closed_orders'] if !opts[:'closed_orders'].nil?
      query_params[:'activeOrders'] = opts[:'active_orders'] if !opts[:'active_orders'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<Order>' 

      # auth_names
      auth_names = opts[:auth_names] || ['BasicAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrdersApi#g_et_orders\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create new order
    # Stores order in Cryptomnio and pushes it immediately to the exchange. The new order is stored with `queued` status, which means that order is being processed by the Cryptomnio. This operation is allowed only if API key has been activated. 
    # @param inline_object2 [InlineObject2] 
    # @param [Hash] opts the optional parameters
    # @return [Order]
    def p_ost_orders(inline_object2, opts = {})
      data, _status_code, _headers = p_ost_orders_with_http_info(inline_object2, opts)
      data
    end

    # Create new order
    # Stores order in Cryptomnio and pushes it immediately to the exchange. The new order is stored with &#x60;queued&#x60; status, which means that order is being processed by the Cryptomnio. This operation is allowed only if API key has been activated. 
    # @param inline_object2 [InlineObject2] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Order, Integer, Hash)>] Order data, response status code and response headers
    def p_ost_orders_with_http_info(inline_object2, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrdersApi.p_ost_orders ...'
      end
      # verify the required parameter 'inline_object2' is set
      if @api_client.config.client_side_validation && inline_object2.nil?
        fail ArgumentError, "Missing the required parameter 'inline_object2' when calling OrdersApi.p_ost_orders"
      end
      # resource path
      local_var_path = '/orders'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(inline_object2) 

      # return_type
      return_type = opts[:return_type] || 'Order' 

      # auth_names
      auth_names = opts[:auth_names] || ['BasicAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrdersApi#p_ost_orders\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
