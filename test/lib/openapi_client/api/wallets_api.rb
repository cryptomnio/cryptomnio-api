=begin
#Cryptomnio API

#test

The version of the OpenAPI document: 0.0.1
Contact: helloworld@flanneldivision.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.1.0

=end

require 'cgi'

module OpenapiClient
  class WalletsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get all wallets
    # Get all wallets based on exchange
    # @param [Hash] opts the optional parameters
    # @option opts [ExchangeCode] :exchange 
    # @option opts [String] :key_id API key ID from cryptomnio
    # @return [Object]
    def wallets_get(opts = {})
      data, _status_code, _headers = wallets_get_with_http_info(opts)
      data
    end

    # Get all wallets
    # Get all wallets based on exchange
    # @param [Hash] opts the optional parameters
    # @option opts [ExchangeCode] :exchange 
    # @option opts [String] :key_id API key ID from cryptomnio
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def wallets_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WalletsApi.wallets_get ...'
      end
      # resource path
      local_var_path = '/wallets'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'exchange'] = opts[:'exchange'] if !opts[:'exchange'].nil?
      query_params[:'keyId'] = opts[:'key_id'] if !opts[:'key_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Object' 

      # auth_names
      auth_names = opts[:auth_names] || ['BasicAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WalletsApi#wallets_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get wallet info
    # Get wallet info
    # @param wallet_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def wallets_wallet_id_get(wallet_id, opts = {})
      data, _status_code, _headers = wallets_wallet_id_get_with_http_info(wallet_id, opts)
      data
    end

    # Get wallet info
    # Get wallet info
    # @param wallet_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def wallets_wallet_id_get_with_http_info(wallet_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WalletsApi.wallets_wallet_id_get ...'
      end
      # verify the required parameter 'wallet_id' is set
      if @api_client.config.client_side_validation && wallet_id.nil?
        fail ArgumentError, "Missing the required parameter 'wallet_id' when calling WalletsApi.wallets_wallet_id_get"
      end
      # resource path
      local_var_path = '/wallets/{walletId}'.sub('{' + 'walletId' + '}', CGI.escape(wallet_id.to_s).gsub('%2F', '/'))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Object' 

      # auth_names
      auth_names = opts[:auth_names] || ['BasicAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WalletsApi#wallets_wallet_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
