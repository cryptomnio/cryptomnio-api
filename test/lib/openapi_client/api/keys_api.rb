=begin
#Cryptomnio API

#test

The version of the OpenAPI document: 0.0.1
Contact: helloworld@flanneldivision.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.1.0

=end

require 'cgi'

module OpenapiClient
  class KeysApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Deactivate API key
    # Deactivates provided API key ID in Cryptomnio. This operation means that Cryptomnio will stop collecting data for the API key, but will keep current trading data in storage 
    # @param key_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [OkMessage]
    def d_elete_keys_key_id_activation(key_id, opts = {})
      data, _status_code, _headers = d_elete_keys_key_id_activation_with_http_info(key_id, opts)
      data
    end

    # Deactivate API key
    # Deactivates provided API key ID in Cryptomnio. This operation means that Cryptomnio will stop collecting data for the API key, but will keep current trading data in storage 
    # @param key_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(OkMessage, Integer, Hash)>] OkMessage data, response status code and response headers
    def d_elete_keys_key_id_activation_with_http_info(key_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: KeysApi.d_elete_keys_key_id_activation ...'
      end
      # verify the required parameter 'key_id' is set
      if @api_client.config.client_side_validation && key_id.nil?
        fail ArgumentError, "Missing the required parameter 'key_id' when calling KeysApi.d_elete_keys_key_id_activation"
      end
      # resource path
      local_var_path = '/keys/{keyId}/activate'.sub('{' + 'keyId' + '}', CGI.escape(key_id.to_s).gsub('%2F', '/'))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'OkMessage' 

      # auth_names
      auth_names = opts[:auth_names] || ['BasicAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: KeysApi#d_elete_keys_key_id_activation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deactivate and Delete API key
    # Deactivates and deletes API key from cryptomnio and clears all connected trade data (orders, balances, etc.) 
    # @param key_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [OkMessage]
    def keys_key_id_delete(key_id, opts = {})
      data, _status_code, _headers = keys_key_id_delete_with_http_info(key_id, opts)
      data
    end

    # Deactivate and Delete API key
    # Deactivates and deletes API key from cryptomnio and clears all connected trade data (orders, balances, etc.) 
    # @param key_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(OkMessage, Integer, Hash)>] OkMessage data, response status code and response headers
    def keys_key_id_delete_with_http_info(key_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: KeysApi.keys_key_id_delete ...'
      end
      # verify the required parameter 'key_id' is set
      if @api_client.config.client_side_validation && key_id.nil?
        fail ArgumentError, "Missing the required parameter 'key_id' when calling KeysApi.keys_key_id_delete"
      end
      # resource path
      local_var_path = '/keys/{keyId}'.sub('{' + 'keyId' + '}', CGI.escape(key_id.to_s).gsub('%2F', '/'))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'OkMessage' 

      # auth_names
      auth_names = opts[:auth_names] || ['BasicAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: KeysApi#keys_key_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Upload and store exchange API key
    # Uploads and stores exchange API key in the cryptomnio.
    # @param inline_object [InlineObject] 
    # @param [Hash] opts the optional parameters
    # @return [OkMessage]
    def keys_post(inline_object, opts = {})
      data, _status_code, _headers = keys_post_with_http_info(inline_object, opts)
      data
    end

    # Upload and store exchange API key
    # Uploads and stores exchange API key in the cryptomnio.
    # @param inline_object [InlineObject] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(OkMessage, Integer, Hash)>] OkMessage data, response status code and response headers
    def keys_post_with_http_info(inline_object, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: KeysApi.keys_post ...'
      end
      # verify the required parameter 'inline_object' is set
      if @api_client.config.client_side_validation && inline_object.nil?
        fail ArgumentError, "Missing the required parameter 'inline_object' when calling KeysApi.keys_post"
      end
      # resource path
      local_var_path = '/keys'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(inline_object) 

      # return_type
      return_type = opts[:return_type] || 'OkMessage' 

      # auth_names
      auth_names = opts[:auth_names] || ['BasicAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: KeysApi#keys_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Activate API key
    # Activates stored API key in Cryptomnio. This operation means that Cryptomnio will start trading data synchronization  based on passed allocation level.  **NOTE** `Content-Length` will need to be set to zero when calling this endpoint.  For more information, this follows the style of  [github's API](https://developer.github.com/v3/gists/#star-a-gist) 
    # @param key_id [String] 
    # @param inline_object1 [InlineObject1] 
    # @param [Hash] opts the optional parameters
    # @return [OkMessage]
    def p_ut_keys_key_id_activate(key_id, inline_object1, opts = {})
      data, _status_code, _headers = p_ut_keys_key_id_activate_with_http_info(key_id, inline_object1, opts)
      data
    end

    # Activate API key
    # Activates stored API key in Cryptomnio. This operation means that Cryptomnio will start trading data synchronization  based on passed allocation level.  **NOTE** &#x60;Content-Length&#x60; will need to be set to zero when calling this endpoint.  For more information, this follows the style of  [github&#39;s API](https://developer.github.com/v3/gists/#star-a-gist) 
    # @param key_id [String] 
    # @param inline_object1 [InlineObject1] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(OkMessage, Integer, Hash)>] OkMessage data, response status code and response headers
    def p_ut_keys_key_id_activate_with_http_info(key_id, inline_object1, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: KeysApi.p_ut_keys_key_id_activate ...'
      end
      # verify the required parameter 'key_id' is set
      if @api_client.config.client_side_validation && key_id.nil?
        fail ArgumentError, "Missing the required parameter 'key_id' when calling KeysApi.p_ut_keys_key_id_activate"
      end
      # verify the required parameter 'inline_object1' is set
      if @api_client.config.client_side_validation && inline_object1.nil?
        fail ArgumentError, "Missing the required parameter 'inline_object1' when calling KeysApi.p_ut_keys_key_id_activate"
      end
      # resource path
      local_var_path = '/keys/{keyId}/activate'.sub('{' + 'keyId' + '}', CGI.escape(key_id.to_s).gsub('%2F', '/'))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(inline_object1) 

      # return_type
      return_type = opts[:return_type] || 'OkMessage' 

      # auth_names
      auth_names = opts[:auth_names] || ['BasicAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: KeysApi#p_ut_keys_key_id_activate\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
